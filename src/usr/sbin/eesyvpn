#!/bin/bash

# Set the vpn server name
VPN_NAME="eesyvpn"
# Set the vpn name displayed to the users
VPN_CLIENT_NAME="eesyvpn"
# set the vpn port used
VPN_PORT="1190"
# Set strengh of the Diffie-Hellman parameters
DH_STRENGH="2048"

# Certification Authority
CAHOME=/etc/eesyvpn/$VPN_NAME
CRT_DIR=$CAHOME/certs
CRT_REVOKED_DIR=$CRT_DIR/revoked
KEY_DIR=$CAHOME/private
KEY_REVOKED_DIR=$KEY_DIR/revoked
CSR_DIR=$CAHOME/csr
CSR_REVOKED_DIR=$CSR_DIR/revoked
PEM_DIR=$CAHOME/pem
PEM_REVOKED_DIR=$PEM_DIR/revoked
CACRT=$CRT_DIR/ca.crt
CAKEY=$KEY_DIR/ca.key
CRL_DIR=$CAHOME/crl
CRLPEM=$CRL_DIR/crl.pem
NEW_CRT_DIR=$CAHOME/misc/ca.db.certs
TA_KEY_DIR=$CAHOME/private
TA_KEY=$TA_KEY_DIR/ta.key
CCD_DIR=$CAHOME/ccd
DHFILE=$KEY_DIR/dh${DH_STRENGH}.pem

# Log configuration
VPN_LOG_DIR="/var/log"
VPN_LOG_NAME="openvpn-$VPN_NAME"
VPN_LOG_FILE="$VPN_LOG_DIR/${VPN_LOG_NAME}.log"
VPN_LOG_STATUS_FILE="$VPN_LOG_DIR/${VPN_LOG_NAME}-status.log"

# OpenSSL
OSSL_CNF_DIR=$CAHOME/openssl
OSSL_CNF=$OSSL_CNF_DIR/openssl.conf
OSSL_INDEX=$OSSL_CNF_DIR/index
OSSL_SERIAL=$OSSL_CNF_DIR/serial

OSSL_VAR_C="FR"
OSSL_VAR_ST="Ile de France"
OSSL_VAR_L="Paris"
OSSL_VAR_O="Easter-eggs"
OSSL_VAR_OU="$OSSL_VAR_O"
OSSL_VAR_EMAIL="postmaster@easter-eggs.com"
OSSL_VAR_CAHOME="$CAHOME"
OSSL_VAR_CANAME="$VPN_NAME"

[ ! -n "$OSSL_CERT_TYPE" ] && OSSL_CERT_TYPE="client, email"

OSSL_CERT_SUBJ_FORMAT="/C=$OSSL_VAR_C/ST=$OSSL_VAR_ST/L=$OSSL_VAR_L/O=$OSSL_VAR_O/OU=$OSSL_VAR_OU/CN=%%CN%%/emailAddress=$OSSL_VAR_EMAIL"

# OpenVPN
OVPN_CNF_DIR=$CAHOME/openvpn
OVPN_CNF_CLIENTS_NAME=$VPN_CLIENT_NAME
OVPN_CNF_CLIENTS_DIR=$OVPN_CNF_DIR/clients
OVPN_CNF_CLIENTS_ZIP_DIR=$OVPN_CNF_CLIENTS_DIR
OVPN_CNF_CLIENTS_TPL=$OVPN_CNF_DIR/client.ovpn.tpl
OVPN_SERVER_CNF=$OVPN_CNF_DIR/openvpn.conf
OVPN_SERVER_LINK=/etc/openvpn/${VPN_NAME}.conf


[ -f /etc/eesyvpn/eesyvpn.conf ] && source /etc/eesyvpn/eesyvpn.conf

function check_ca_structure() {
	# Check structure
	[ ! -d $CAHOME ] && echo "ERROR : Certification Authority directory not found ($CAHOME). Check your configuration" && exit 1
	[ ! -f $CACRT ] && echo "ERROR : Certification Authority certificate not found ($CACRT). Check your configuration" && exit 1
	[ ! -f $CAKEY ] && echo "ERROR : Certification Authority key not found ($CAKEY). Check your configuration" && exit 1
	return 0
}

function check_directories() {
	# Create structural directories if not exists
	for dir in $CAHOME $KEY_DIR $KEY_REVOKED_DIR $CRT_DIR $CRT_REVOKED_DIR $CSR_DIR $CSR_REVOKED_DIR $PEM_DIR $PEM_REVOKED_DIR $NEW_CRT_DIR $OVPN_CNF_DIR $OVPN_CNF_CLIENTS_DIR $OVPN_CNF_CLIENTS_ZIP_DIR $OSSL_CNF_DIR $CRL_DIR $TA_KEY_DIR $CCD_DIR
	do
		if [ ! -d $dir ]
		then
			echo -n "  - create $dir : "
			mkdir -p $dir
			chmod 755 $dir
			echo done.
		fi
	done

	# Fix structural directories rights
	chmod 750 $KEY_DIR $CSR_DIR $TA_KEY_DIR $OVPN_CNF_CLIENTS_DIR $PEM_DIR $OSSL_CNF_DIR
	return 0
}

function init_openssl_config() {
	echo -n "INFO : Initialize Certification Authority OpenSSL configuration ($OSSL_CNF) : "
	cp /usr/share/doc/eesyvpn/example/openssl.conf $OSSL_CNF
	sed -i "s/%%C%%/$OSSL_VAR_C/g" $OSSL_CNF
	sed -i "s/%%ST%%/$OSSL_VAR_ST/g" $OSSL_CNF
	sed -i "s/%%L%%/$OSSL_VAR_L/g" $OSSL_CNF
	sed -i "s/%%O%%/$OSSL_VAR_O/g" $OSSL_CNF
	sed -i "s/%%OU%%/$OSSL_VAR_OU/g" $OSSL_CNF
	sed -i "s/%%EMAIL%%/$OSSL_VAR_EMAIL/g" $OSSL_CNF
	sed -i "s@%%CAHOME%%@$OSSL_VAR_CAHOME@g" $OSSL_CNF
	sed -i "s@%%CANAME%%@$OSSL_VAR_CANAME@g" $OSSL_CNF
	echo done.
	return 0
}

function set_dhparam_strengh() {
	echo "INFO : Generate OpenSSL dh$DH_STRENGH.pem file"
	openssl dhparam -out $DHFILE $DH_STRENGH
}

function check_openssl() {
	# OpenSSL
	[ ! -f $OSSL_CNF ] && init_openssl_config
	[ ! -f $OSSL_INDEX ] && echo "INFO : Initialize OpenSSL index file" && touch "$OSSL_INDEX"
	[ ! -f $OSSL_SERIAL ] && echo "INFO : Initialize OpenSSL serial file" && echo -n 01 > $OSSL_SERIAL
	[ ! -f $DHFILE ] && echo "ERROR: Diffie Hellman parameter is missing. Check your configuration" && exit 1
	return 0
}

function check_openvpn() {
	# OpenVPN
	[ ! -d $OVPN_CNF_DIR ] && echo "INFO : Create OpenVPN configuration directory" && mkdir $OVPN_CNF_DIR
	[ ! -f $OVPN_CNF_CLIENTS_TPL ] && echo "ERROR : OpenVPN configuration template file not found ($OVPN_CNF_CLIENTS_TPL). Check your configuration" && exit 1
	return 0
}

function to_humain_date() {
	echo $1|sed 's/\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)Z/20\1\/\2\/\3 \4:\5:\6/'
}

# Parameters
action=$1
name=$2

function usage() {
	echo "Usage: $0 {create|recreate|list|view|renew|revoke|makeconf|makezipconf|makecert|namebyid} {CERTIFICATE_NAME} [environnement: (windows (default)|linux)]"
	echo
	echo -e "\tcreate \t: Create user certificate. (default with dos format. Specify an extra arg 'linux' to use linux format & conffile)"
	echo -e "\tlist \t: List all certificates"
	echo
	echo "To initialize your CA, run $0 initialize [your.server.fqdn]"
}

if [ ! -n "$action" ]
then
	usage
	exit 0
fi

if [ ! -n "$name" -a "$action" != "update-crl" -a "$action" != "list" ]
then
	echo CERTIFICATE_NAME not defined
	usage
        exit 0
fi

[ "$action" != "initialize" ] && check_openssl && check_directories && check_openvpn

# Main
case $action in
	create)
		if [ -f $CRT_DIR/$name.crt  -o -f $KEY_DIR/$name.key -o -f $PEM_DIR/$name.pem ]
		then
			echo "Name $name already used"
			exit 1
		fi

		echo "Generate key file : "
		openssl genrsa -out $KEY_DIR/$name.key 4096
		echo done.
		echo

		echo "Fix key file access right : "
		chmod 0600 $KEY_DIR/$name.key
		echo done.
		echo

		$0 makecert "$name" "$3"

		if [ "$3" != '--without-config' -a "$4" != '--without-config' -a "$3" != '--server' ]
		then
			if [ "$3" = 'linux' ]
			then
				OS="linux"
			else
				echo "We use Windows formated openvpn conf file by default"
				echo "If you want a linux version, use $0 create linux"
				OS="windows"
			fi
			$0 makeconf $name $OS
			$0 makezipconf $name $OS
		fi
	;;
	makecert)
		if [ ! -f $KEY_DIR/$name.key ]
		then
			echo "Key file of $name not found"
			exit 1
		fi

		echo -n "Generate csr file : "
		SUBJ=$( echo "$OSSL_CERT_SUBJ_FORMAT"|sed "s/%%CN%%/$name/g" )
		openssl req -new -key $KEY_DIR/$name.key -out $CSR_DIR/$name.csr -config $OSSL_CNF -subj "$SUBJ"
		echo done.
		echo

		$0 sign $name "$3"

		if [ ! -f "$CRT_DIR/$name.crt" ]
		then
			echo "ERROR : Certificate file not found ($CRT_DIR/$name.crt)."
			exit 1
		fi

		echo -n "Generate pem file : "
		cat $KEY_DIR/$name.key >  $PEM_DIR/$name.pem
		cat $CRT_DIR/$name.crt >> $PEM_DIR/$name.pem
		echo done.
	;;
	recreate)
		if [ ! -f $CRT_DIR/$name.crt ]
		then
			echo "This name $name not currently exist"
			exit 1
		fi
		$0 revoke $name
		$0 create $name "$3"
	;;
	renew)
		if [ ! -f $CRT_DIR/$name.crt ]
		then
			echo "This name $name not currently exist"
			exit 1
		fi
		$0 revoke $name --preserve-key
		$0 makecert $name "$3"

		$0 makeconf $name
		$0 makezipconf $name
	;;
	sign)
		if [ ! -f $CSR_DIR/$name.csr ]
		then
			echo "CSR not found: $CSR_DIR/$name.csr"
			exit 1
		fi
		if [ "$3" == "--server" ]
		then
			EXT="-extensions server"
		else
			EXT=""
		fi
		openssl ca -config $OSSL_CNF -batch $EXT -out $CRT_DIR/$name.crt -infiles $CSR_DIR/$name.csr
		echo
		echo "CA verifying : "
		openssl verify -CAfile $CACRT $CRT_DIR/$name.crt
		echo
	;;
	revoke)
		if [ ! -f $CRT_DIR/$name.crt ]
		then
			echo "CRT not found: $CRT_DIR/$name.crt"
			exit 1
		fi
		echo "Revoke CRT : "
		openssl ca -config $OSSL_CNF -revoke $CRT_DIR/$name.crt
		echo done.
		echo
		echo -n "Move old certificate in revoked directory : "
		mv -f $CRT_DIR/$name.crt $CRT_REVOKED_DIR/
		mv -f $PEM_DIR/$name.pem $PEM_REVOKED_DIR/
		mv -f $CSR_DIR/$name.csr $CSR_REVOKED_DIR/
		[ "$3" != "--preserve-key" ] && mv -f $KEY_DIR/$name.key $KEY_REVOKED_DIR/
		echo done.

		$0 update-crl
	;;
	update-crl)
		echo "Update CRL ($CRLPEM) : "
		openssl ca -gencrl -config $OSSL_CNF -crldays 31 -out $CRLPEM
		echo done.

    echo "Verify crl checking is enabled in your conf: $OVPN_SERVER_CNF"
    if [ -f "$OVPN_SERVER_CNF" ]
    then
            sed -i "s/#crl-verify/crl-verify/g" $OVPN_SERVER_CNF
            echo done.
						echo "Restarting openvpn.."
						systemctl restart openvpn@${VPN_NAME}.service
    fi
	;;
	makeconf)
		ovpn=$OVPN_CNF_CLIENTS_DIR/${OVPN_CNF_CLIENTS_NAME}.ovpn
		OS="$3"
		echo "Make OpenVPN client config file"
		if [ "$OS" = 'linux' ]; then
			cat $OVPN_CNF_CLIENTS_TPL > $ovpn
		else
			cat $OVPN_CNF_CLIENTS_TPL|unix2dos > $ovpn
		fi

		if [ $( grep -c '%%CERT%%' $ovpn ) -gt 0 ]
		then
			perl -pi -e "s(%%CERT%%)($( echo ${name}.crt ))" $ovpn
		fi
		if [ $( grep -c '%%KEY%%' $ovpn ) -gt 0 ]
		then
			perl -pi -e "s(%%KEY%%)($( echo ${name}.key ))" $ovpn
		fi

		if [ "$OS" = 'linux' ]; then
			mv $OVPN_CNF_CLIENTS_DIR/${OVPN_CNF_CLIENTS_NAME}.ovpn  $OVPN_CNF_CLIENTS_DIR/${OVPN_CNF_CLIENTS_NAME}.conf
			ovpn=$OVPN_CNF_CLIENTS_DIR/${OVPN_CNF_CLIENTS_NAME}.conf
			sed -i "/^# Required on Microsoft Windows 7/d" $ovpn
			sed -i "/^route-method exe/d" $ovpn
			sed -i "/^route-delay 2/d" $ovpn
		fi
		echo "OpenVPN client config file created in:"
		echo "  $ovpn"
		echo done.
	;;
	makezipconf)
		for conf in `find $OVPN_CNF_CLIENTS_DIR \( -iname ${OVPN_CNF_CLIENTS_NAME}.conf -o -iname ${OVPN_CNF_CLIENTS_NAME}.ovpn \)`
		do
			ovpn=$conf
		done
		[ ! -f $ovpn ] && $0 makeconf $name

		ADD_IN_ZIP="$CRT_DIR/${name}.crt $KEY_DIR/${name}.key	$CACRT $TA_KEY"

		if [ -n "$ADD_IN_ZIP" ]
		then
			zip=$OVPN_CNF_CLIENTS_ZIP_DIR/${name}.zip
			echo "Make OpenVPN client zip config file : $zip"
			[ -f $zip ] && echo  -n "Remove old OpenVPN client config zip file : " && rm -f $zip && echo done.
			zip -r $zip -j $ADD_IN_ZIP $ovpn
			echo done.
		else
			echo "No additional file detected. Don't generate zip file, just use OpenVPN client config file : $ovpn"
		fi
	;;
	initialize)
		echo "Initialize CA with servername $name :"

		if [ -e "$CAHOME" -o -e "$CAKEY" -o -e "$CACRT" ]
		then
			echo "ERROR : Installation already initialized."
			echo
			echo "  If you want to reset your installation, please remove manually"
			echo "  configuration directory :"
			echo "    $CAHOME"
			exit 1
		fi

		for dir in $CAHOME $OSSL_CNF_DIR
        	do
                	if [ ! -d $dir ]
                	then
                        	echo -n "  - create $dir : "
                        	mkdir -p $dir
                        	chmod 755 $dir
                        	echo done.
                	fi
        	done
		[ ! -f $OSSL_CNF ] && init_openssl_config

		echo "Build Easy RSA temporary directory : "
		EASYRSA_DIR=$( mktemp -d -u )
		make-cadir $EASYRSA_DIR
		[ ! -d "$EASYRSA_DIR" -o ! -e "$EASYRSA_DIR/build-ca" ] && echo "ERROR : problem occured creating Easy RSA directory." && exit 1
		echo done.

		cd "$EASYRSA_DIR"
		echo "Initialize SSL variables :"
		source ./vars

		# Run clean-all to auto-create keys dir
		./clean-all

		export KEY_COUNTRY="$OSSL_VAR_C"
		export KEY_PROVINCE="$OSSL_VAR_ST"
		export KEY_CITY="$OSSL_VAR_L"
		export KEY_ORG="$OSSL_VAR_O"
		export KEY_EMAIL="$OSSL_VAR_EMAIL"
		#export KEY_CN="$name"
		export KEY_NAME="$name"
		export KEY_OU="$OSSL_VAR_OU"

		mkdir $KEY_DIR
		./build-ca

		echo "Copy generated files in CA directory :"
		echo -n "  - Key ($CAKEY) : "
		mv keys/ca.key $CAKEY
		echo done.

		echo -n "  - Certificate ($CACRT) : "
		mv keys/ca.crt $CACRT
		echo done.

		cd $CAHOME

		echo "Clean Easy RSA temporary directory :"
		cd $CAHOME
		rm -fr "$EASYRSA_DIR"
		echo done.

		if [ ! -f "$OVPN_CNF_CLIENTS_TPL" ]
		then
			echo "Create client template configuration : "
			cp /usr/share/doc/eesyvpn/example/client.ovpn.tpl $OVPN_CNF_CLIENTS_TPL
			sed -i "s/%%HOSTNAME%%/$name/g" $OVPN_CNF_CLIENTS_TPL
			sed -i "s/%%VPN_PORT%%/$VPN_PORT/g" $OVPN_CNF_CLIENTS_TPL
			echo done.
		fi

		echo "Clean previous generated TA key and build an new one : "
		[ -f $TA_KEY ] && rm -f $TA_KEY
		openvpn --genkey --secret $TA_KEY
		echo done

		[ ! -f $DHFILE ] && set_dhparam_strengh

		echo -n "Create VPN server key and certificate :"
		$0 create "$name" --server --without-config
		echo done.
		SRVKEY=$EESYVPN_KEY_DIR/${name}.key
		SRVCRT=$CRT_DIR/${name}.crt

		echo "Fixed configuration files access rights :"
		echo -n "  - Key files : "
		chmod 0600 $CAKEY $TA_KEY $SRVKEY
		echo done.

		echo -n "  - Certificates files : "
		chmod 0644 $CACRT $SRVCRT
		echo done.

		if [ ! -f "$OVPN_SERVER_CNF" ]
		then
			echo -n "Create server configuration : "
			cp /usr/share/doc/eesyvpn/example/openvpn.conf $OVPN_SERVER_CNF
			sed -i "s|%%HOSTNAME%%|$name|g" $OVPN_SERVER_CNF
			sed -i "s|%%VPN_NAME%%|$VPN_NAME|g" $OVPN_SERVER_CNF
			sed -i "s|%%VPN_PORT%%|$VPN_PORT|g" $OVPN_SERVER_CNF
			sed -i "s|%%SRVKEY%%|$SRVKEY|g" $OVPN_SERVER_CNF
			sed -i "s|%%SRVCRT%%|$SRVCRT|g" $OVPN_SERVER_CNF
			sed -i "s|%%CACRT%%|$CACRT|g" $OVPN_SERVER_CNF
			sed -i "s|%%DHFILE%%|$DHFILE|g" $OVPN_SERVER_CNF
			sed -i "s|%%TA_KEY%%|$TA_KEY|g" $OVPN_SERVER_CNF
			sed -i "s|%%CRLPEM%%|$CRLPEM|g" $OVPN_SERVER_CNF
			sed -i "s|%%CCD_DIR%%|$CCD_DIR|g" $OVPN_SERVER_CNF
			sed -i "s|%%VPN_LOG_FILE%%|$VPN_LOG_FILE|g" $OVPN_SERVER_CNF
			sed -i "s|%%VPN_LOG_STATUS_FILE%%|$VPN_LOG_STATUS_FILE|g" $OVPN_SERVER_CNF
			ln -s $OVPN_SERVER_CNF $OVPN_SERVER_LINK
			echo done.

			if [ -d /run/systemd/system ]
			then
				service=openvpn@$( basename $OVPN_SERVER_LINK|sed 's/\.conf$//' ).service

				echo "Enable service on boot :"
				/bin/systemctl enable $service
				echo done.

				echo "Start service : "
				/bin/systemctl start $service
				/bin/systemctl status $service
			else
				# OpenVPN is enabled by default on init V debian installation
				/etc/init.d/openvpn start $( basename $OVPN_SERVER_LINK|sed 's/\.conf$//' )
			fi
		fi
	;;
	list)
		if [ "$2" == "--csv" ]
		then
			CSV=1
		else
			CSV=0
			echo "ID | State | Type   | Expiration date     | Revocation date     | Name"
			echo "---+-------+--------+---------------------+---------------------+------------------------------"
		fi
		IFS="
"
		for line in $( cat $OSSL_INDEX )
		do
			state=$( echo "$line"| cut -f1 )
			expdate=$( echo "$line"|cut -f2 )
			expdate=$( to_humain_date $expdate )
			revdate=$( echo "$line"|cut -f3 )
			revdate=$( to_humain_date $revdate )
			id=$( echo "$line"|cut -f4 )
			fields=$( echo "$line"|cut -f6 )
			cn=$( echo "$fields"|sed 's/^.*CN=\([^\/]*\).*$/\1/' )
			if [ $( openssl x509 -noout -text -in "$NEW_CRT_DIR/$id.pem"|grep -c "SSL Server" ) -eq 1 ]
			then
				typ="server"
			else
				typ="client"
			fi

			if [ $CSV -eq 1 ]
			then
				echo "'$id';'$cn';'$state';'$typ';'$expdate';'$revdate'"
				continue
			fi
			if [ "$revdate" == "" ]
			then
				revdate="                   "
			fi
			echo "$id | $state     | $typ | $expdate | $revdate | $cn"
		done
	;;
	view)
		if [ -f "$CRT_DIR/$name.crt" ]
		then
			crt="$CRT_DIR/$name.crt"
		elif [ -f "$NEW_CRT_DIR/$name.pem" ]
		then
			crt="$NEW_CRT_DIR/$name.pem"
		else
			echo "Invalid name"
			exit 1
		fi
		openssl x509 -noout -text -in "$crt"
	;;
	namebyid)
		if [ -f "$NEW_CRT_DIR/$name.pem" ]
		then
			openssl x509 -noout -text -in "$NEW_CRT_DIR/$name.pem"|grep Subject:|sed 's/^.*CN=\([^ ,]*\).*$/\1/'
		else
			echo "Invalid ID"
			exit 1
		fi
	;;
        *)
		echo "Invalid Action"
                usage
                exit 0
        ;;
esac

exit 0
